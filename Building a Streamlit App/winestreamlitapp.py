# -*- coding: utf-8 -*-
"""WineStreamlitApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P_4jJXZvR3kcnerIakhfvvOkT10C6Jvp

### Imports
"""

# Google drive imports
from google.colab import drive
# To access drive files
drive.mount('/content/drive')

#streamlit imports

#tries streamlit and installs if not in system
try:
  import streamlit as st
except:
  !pip install langchain openai streamlit
  import streamlit as st

import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

file_path_ww = '/content/drive/MyDrive/Colab Notebooks/DS_450_TMPs/Streamlit App/winequality-white.csv'
df_whitewine = pd.read_csv(file_path_ww)

file_path_rw = '/content/drive/MyDrive/Colab Notebooks/DS_450_TMPs/Streamlit App/winequality-red.csv'
df_redwine = pd.read_csv(file_path_rw)

# Create a new column 'color' in each DataFrame
df_redwine['color'] = 'red'
df_whitewine['color'] = 'white'

# Concatenate the two DataFrames vertically
df_merged = pd.concat([df_redwine, df_whitewine], ignore_index=True)

# Display the merged DataFrame
df_merged.head()

# Define the file path for saving
file_path_merged = '/content/drive/MyDrive/Colab Notebooks/DS_450_TMPs/Streamlit App/winequality-merged.csv'

# Save the merged DataFrame to a CSV file
df_merged.to_csv(file_path_merged, index=False)

df_merged.head()

"""### Loading Streamlit"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# #tries streamlit and installs if not in system
# try:
#   import streamlit as st
# except:
#   #!pip install langchain openai streamlit
#   import streamlit as st
# 
# import re
# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns
# st.title("Hello World")
#

!curl https://loca.lt/mytunnelpassword

!streamlit run app.py &>/content/logs.txt &

!npx localtunnel --port 8501



# Google drive imports
from google.colab import drive
# To access drive files
drive.mount("/content/drive", force_remount=True)

#streamlit imports

#tries streamlit and installs if not in system
try:
  import streamlit as st
except:
  !pip install langchain openai streamlit
  import streamlit as st

# Imports for cloudflared
!pip install -q streamlit
!wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
!chmod +x cloudflared
!mv cloudflared /usr/local/bin/cloudflared

# Windows installation
# IMPORTANT - you need to install cloudflare on your system for this to work (https://github.com/cloudflare/cloudflared/releases)
# Download cloudfalred-windows-amd64.msi and run it

# Start Streamlit in background
import threading
import subprocess
import time
import os

import pandas as pd


wine_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DS_450_TMPs/Streamlit App/winequality-merged.csv')

red_wine_df = wine_df[wine_df['color'] == 'red']
white_wine_df = wine_df[wine_df['color'] == 'white']

red_wine_df.head()

import shutil
shutil.copyfile('/content/drive/MyDrive/Colab Notebooks/DS_450_TMPs/Streamlit App/winequality-merged.csv', '/content/winequality-merged.csv')

# Code for streamlit, all coding needs to be done inside of variables

# standard imports
imports_code = '''
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import streamlit as st
import re

'''
# loading data frame
df_code = """

# loading data frame using st.cache_data
@st.cache_data  # This decorator caches the function output
def load_data():
    data_path = '/content/winequality-merged.csv'
    try:
        df = pd.read_csv(data_path)
        return df  # Return the main DataFrame
    except Exception as e:
        st.error(f"Error loading the data: {e}")
        return None  # Return None if there's an error

# Store DataFrame in session state
if 'data' not in st.session_state:
    st.session_state.data = load_data()

# Function to get the filtered dataframe based on wine type
@st.cache_data  # Cache the filtered dataframes as well
def get_filtered_df(wine_type):  # Remove df from arguments
    df = st.session_state.data  # Access df from session state
    if wine_type == "Red":
        return df[df['color'] == 'red']
    else:
        return df[df['color'] == 'white']


"""

# creating title for app
title_code = '''

col1, col2 = st.columns([1, 3])

with col2:
    st.image('https://images.photowall.com/products/47209/red-wine-pour.jpg?h=699&q=85', width=150)

with col1:
    st.markdown("# Wine Quality Viewer")
'''

# code for selecting wine quality
wine_type_code = '''
if "wine_type" not in st.session_state:  # selecting wine type
    st.session_state["wine_type"] = "Red"  # Default wine type

st.subheader("Select your wine type:")
col1, col2 = st.columns(2)
with col1:
    if st.button("üç∑ Red Wine"):
        st.session_state['wine_type'] = "Red"

with col2:
    if st.button("ü•Ç White Wine"):
        st.session_state['wine_type'] = "White"
'''

tabs_creation_code = '''
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(["MetaData", "Data", "Color", "Quality",
 "Scatter", "Box", "Classification"])  # creation of tabs

'''

tab1_metadata = """

with tab1:
    st.header("üìã Overview")
    st.write(f"This is an overview of **{st.session_state['wine_type']} wine**.")

"""

tab2_data = """

with tab2:
    st.header("üìë Details")

    if st.session_state["wine_type"] == "Red":
        st.write("Red wine is made from dark-colored grape varieties.")
        filtered_df = get_filtered_df(st.session_state["wine_type"])  # Get filtered df
    else:
        st.write("White wine is made from green or yellowish grapes.")
        filtered_df = get_filtered_df(st.session_state["wine_type"])  # Get filtered df

    # Radio button to select display mode
    display_mode = st.radio("Select display mode:", ["Chemical", "Alcohol", "Quality", "All"])

    # Display columns based on selection
    if display_mode == "Chemical":
        chemical_columns = ['color'] + [col for col in filtered_df.columns if col not in ['color', 'alcohol', 'quality']]
        st.write(filtered_df[chemical_columns])
    elif display_mode == "Alcohol":
        st.write(filtered_df[['color', 'alcohol']])
    elif display_mode == "Quality":
        st.write(filtered_df[['color', 'quality']])
    elif display_mode == "All":
        all_columns = ['color'] + [col for col in filtered_df.columns if col != 'color']
        st.write(filtered_df[all_columns])
"""

tab3_color = """

with tab3:
    st.header("Wine Type Distribution")

    # Get wine type counts
    wine_type_counts = st.session_state.data['color'].value_counts()

    # Create bar chart
    fig, ax = plt.subplots()
    ax.bar(wine_type_counts.index, wine_type_counts.values)
    ax.set_xlabel("Wine Type")
    ax.set_ylabel("Count")
    ax.set_title("Distribution of Red and White Wines")

    st.pyplot(fig)  # Display the chart using st.pyplot

"""

tab4_quality = """

with tab4:
    st.header("Wine Quality Distribution")

    # Get wine quality counts
    wine_quality_counts = st.session_state.data['quality'].value_counts().sort_index()

    # Create bar chart
    fig, ax = plt.subplots()
    ax.bar(wine_quality_counts.index, wine_quality_counts.values)
    ax.set_xlabel("Wine Quality")
    ax.set_ylabel("Count")
    ax.set_title("Distribution of Wine Quality")

    st.pyplot(fig)  # Display the chart using st.pyplot

"""

tab5_scatter = """

# Scatter tab content
with tab5:
    st.header("Scatter Plot")

    # Column selection
    column1 = st.selectbox("Select first column:", st.session_state.data.columns, index=0)  # Default to first column
    column2 = st.selectbox("Select second column:", st.session_state.data.columns, index=1)  # Default to second column

    # Check if both columns are selected
    if column1 and column2:
        # Create scatter plot
        fig, ax = plt.subplots()
        ax.scatter(st.session_state.data[column1], st.session_state.data[column2])
        ax.set_xlabel(column1)
        ax.set_ylabel(column2)
        ax.set_title(f"Scatter Plot of {column1} vs {column2}")

        st.pyplot(fig)  # Display the chart using st.pyplot
        #st.write(f"Scatter Plot of {column1} vs {column2}")
"""
tab6_box = """

with tab6:
    st.header("Box Plot")

    # Column selection for box plot
    column_to_plot = st.selectbox("Select column for box plot:", st.session_state.data.columns)

    # Create box plot
    fig, ax = plt.subplots()
    ax.boxplot(st.session_state.data[column_to_plot])
    ax.set_ylabel(column_to_plot)
    ax.set_title(f"Box Plot of {column_to_plot}")

    st.pyplot(fig)  # Display the chart using st.pyplot

"""

tab7_classification = """

with tab7:
    st.header("Wine Quality Classification")

    # Prepare data for classification
    X = st.session_state.data.drop('quality', axis=1)  # Features
    y = st.session_state.data['quality']  # Target variable

    # Split data into training and testing sets
    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train a Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = model.predict(X_test)

    # Display classification report
    from sklearn.metrics import classification_report
    report = classification_report(y_test, y_pred)
    st.subheader("Classification Report")
    st.text(report)

    # Display feature importance
    st.subheader("Feature Importance")
    importances = model.feature_importances_
    feature_names = X.columns
    feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
    feature_importance_df = feature_importance_df.sort_values('Importance', ascending=False)
    st.write(feature_importance_df)

 # Display feature importance as a bar chart
    st.subheader("Feature Importance")
    importances = model.feature_importances_
    feature_names = X.columns

    # Create bar chart
    fig, ax = plt.subplots()
    ax.barh(feature_names, importances)  # Use barh for horizontal bar chart
    ax.set_xlabel("Importance")
    ax.set_ylabel("Feature")
    ax.set_title("Feature Importance")

    st.pyplot(fig)  # Display the chart using st.pyplot

"""


# Combine all the code sections into one string
app_code = imports_code + title_code + wine_type_code + tabs_creation_code + tab1_metadata + tab2_data + tab3_color + tab4_quality + tab5_scatter + tab6_box + tab7_classification

# Write the combined code to the app.py file
with open("app.py", "w") as f:
    f.write(app_code)

# Start Streamlit
streamlit_process = subprocess.Popen(['streamlit', 'run', 'app.py'])

# Wait a moment for it to boot up
time.sleep(5)

# Start Cloudflare Tunnel
!cloudflared tunnel --url http://localhost:8501

# Sometimes this will come back as unable to connect to server but just wait around 5 minutes and it will resolve itself
# also try waiting 30s and refreshing the page